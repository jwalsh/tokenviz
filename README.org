#+TITLE: TokenViz: Token Usage Visualization
#+AUTHOR: Jason Walsh
#+DATE: [2024-11-05]
#+PROPERTY: header-args:bash :mkdirp t
#+PROPERTY: header-args:makefile :mkdirp t
#+PROPERTY: header-args:mermaid :mkdirp t
#+PROPERTY: header-args :tangle yes
#+STARTUP: showall

* Overview
TokenViz simulates LLM token usage monitoring through Unix tools, helping visualize patterns that would typically be monitored via enterprise observability platforms.

* Architecture
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src mermaid :file docs/images/architecture.png
flowchart TD
    subgraph Generators["Token Generators"]
        G1["Generator 1\n(Random 0-3000)"]
        G2["Generator 2\n(Random 0-3000)"]
        G3["Generator 3\n(Random 0-3000)"]
    end

    subgraph Storage["Storage Layer"]
        L1["/tmp/tokenload/gen1.log"]
        L2["/tmp/tokenload/gen2.log"]
        L3["/tmp/tokenload/gen3.log"]
    end

    subgraph Processing["Aggregation Layer"]
        A1["Aggregator\n(Sum all inputs)"]
        P1["Named Pipe\n/tmp/tokenload_pipe"]
        D1["Data File\n/tmp/tokenload_data"]
    end

    subgraph Display["Visualization Layer"]
        V1["tmux pane 1\nGenerator Logs"]
        V2["tmux pane 2\nTotal Usage"]
        V3["tmux pane 3\nxload Graph"]
    end

    G1 --> L1
    G2 --> L2
    G3 --> L3
    L1 & L2 & L3 --> A1
    A1 --> P1
    A1 --> D1
    L1 & L2 & L3 --> V1
    D1 --> V2
    P1 --> V3
#+end_src

* Implementation
** Configuration
:PROPERTIES:
:header-args:makefile: :tangle Makefile
:END:

#+begin_src makefile
# TokenViz Configuration
SHELL := /bin/bash
.PHONY: all clean test dashboard stop setup generators aggregator test-tmux test-xload status logs kill-all restart

# Paths
PIPE := /tmp/tokenload_pipe
DATA := /tmp/tokenload_data
LOGDIR := /tmp/tokenload
SESSION := tokenviz
#+end_src

** Core Components
*** Setup
#+begin_src makefile
setup:
        @echo "Setting up directories and files..."
        @rm -rf $(LOGDIR) || true
        @mkdir -p $(LOGDIR)
        @rm -f $(PIPE) || true
        @mkfifo $(PIPE)
        @touch $(DATA)
        @for i in 1 2 3; do echo "Initializing gen$$i..." > $(LOGDIR)/gen$$i.log; done
#+end_src

*** Generators
#+begin_src makefile
generators: setup
        @for i in 1 2 3; do \
                ( \
                        while true; do \
                                if [ -d "$(LOGDIR)" ]; then \
                                        echo "gen$$i: $$((RANDOM % 3000))" >> "$(LOGDIR)/gen$$i.log"; \
                                else \
                                        exit 0; \
                                fi; \
                                sleep 1; \
                        done \
                ) & \
        done
#+end_src

*** Aggregator
#+begin_src makefile
aggregator: setup
        @( \
                while true; do \
                        if [ -d "$(LOGDIR)" ]; then \
                                TOTAL=0; \
                                for f in $(LOGDIR)/gen*.log; do \
                                        if [ -f "$$f" ]; then \
                                                VAL=$$(tail -n1 "$$f" 2>/dev/null | grep -o '[0-9]*$$' || echo 0); \
                                                TOTAL=$$((TOTAL + VAL)); \
                                        fi; \
                                done; \
                                echo "$$TOTAL" > "$(PIPE)" 2>/dev/null || exit 0; \
                                echo "[`date '+%H:%M:%S'`] Total: $$TOTAL" > "$(DATA)" 2>/dev/null || exit 0; \
                        else \
                                exit 0; \
                        fi; \
                        sleep 1; \
                done \
        ) &
#+end_src

** Process Management
*** Dashboard
#+begin_src makefile
dashboard: stop setup
        @echo "Starting dashboard..."
        @tmux new-session -d -s $(SESSION) -n 'TokenViz' \; \
                split-window -h \; \
                split-window -h \; \
                select-layout even-horizontal \; \
                send-keys -t 0 "while true; do clear; tail -n 10 $(LOGDIR)/gen*.log 2>/dev/null || echo 'Waiting for data...'; sleep 1; done" C-m \; \
                send-keys -t 1 "while true; do clear; tail -n 10 $(DATA) 2>/dev/null || echo 'Waiting for data...'; sleep 1; done" C-m \; \
                send-keys -t 2 "DISPLAY=:0 xload -geometry 400x200+100+100 -bg black -fg green -scale 5 < $(PIPE)" C-m \; \
                select-pane -t 0
        @echo "Starting generators..."
        @$(MAKE) generators
        @echo "Starting aggregator..."
        @$(MAKE) aggregator
        @echo "Attaching to session..."
        @tmux attach -t $(SESSION)
#+end_src

*** Process Control
#+begin_src makefile
stop:
        @echo "Stopping all processes..."
        @pkill -f "/bin/bash.*while true.*gen" 2>/dev/null || true
        @pkill -f "while true.*TOTAL" 2>/dev/null || true
        @tmux kill-session -t $(SESSION) 2>/dev/null || true
        @rm -f $(PIPE) $(DATA) 2>/dev/null || true
        @rm -rf $(LOGDIR) 2>/dev/null || true
        @echo "All processes stopped"

kill-all:
        @echo "Emergency cleanup in progress..."
        @ps ax | grep "gen.*RANDOM" | grep -v grep | awk '{print $$1}' | xargs kill -9 2>/dev/null || true
        @pkill -f "while true.*TOTAL" 2>/dev/null || true
        @echo "Emergency cleanup complete"

restart: stop dashboard
#+end_src

** Utility Functions
#+begin_src makefile
status:
        @echo "TokenViz Status:"
        @echo "---------------"
        @echo "Generator processes:"
        @ps ax | grep "while true.*gen" | grep -v grep || echo "No generators running"
        @echo "\nAggregator process:"
        @ps ax | grep "while true.*TOTAL" | grep -v grep || echo "No aggregator running"
        @echo "\nTmux session:"
        @tmux has-session -t $(SESSION) 2>/dev/null && echo "Session $(SESSION) is running" || echo "No session running"

logs:
        @echo "Last 5 lines from each generator:"
        @for i in 1 2 3; do \
                echo "\nGenerator $$i:"; \
                tail -n 5 "$(LOGDIR)/gen$$i.log" 2>/dev/null || echo "No log file"; \
        done
        @echo "\nLast 5 lines from aggregator:"
        @tail -n 5 "$(DATA)" 2>/dev/null || echo "No aggregator data"
#+end_src

** Tests
#+begin_src makefile
test-tmux:
        @echo "Testing tmux..."
        @tmux new-session -d -s test-tokenviz || (echo "Failed to create tmux session" && exit 1)
        @echo "Created test session"
        @tmux has-session -t test-tokenviz || (echo "Session creation failed" && exit 1)
        @tmux kill-session -t test-tokenviz
        @echo "Tmux test passed"

test-xload:
        @echo "Testing xload..."
        @echo "DISPLAY=$$DISPLAY"
        @mkfifo $(PIPE) 2>/dev/null || true
        @(while true; do echo "100"; sleep 1; done) > $(PIPE) & echo "Starting generator"
        @DISPLAY=:0 xload -geometry 200x100+50+50 -bg black -fg green < $(PIPE) & echo "Started xload"
        @sleep 5
        @pkill -f "while true.*echo.*100" || true
        @pkill xload || true
        @rm -f $(PIPE)
        @echo "Xload test complete"

test: test-tmux test-xload
        @echo "All tests passed"
#+end_src

** Main Targets
#+begin_src makefile
clean: stop

all: test dashboard
#+end_src

* Production Equivalents
:PROPERTIES:
:header-args: :tangle no
:END:

** AWS Implementation
#+begin_src mermaid :file docs/images/aws-impl.png
flowchart LR
    subgraph LLMs["LLM Services"]
        L1["Service 1"]
        L2["Service 2"]
        L3["Service 3"]
    end

    subgraph Queue["Message Queue"]
        Q1["SNS Topic\nToken Usage"]
        Q2["SQS Queue\nAggregation"]
    end

    subgraph Monitor["Monitoring"]
        M1["CloudWatch\nMetrics"]
        M2["CloudWatch\nDashboard"]
    end

    L1 & L2 & L3 --> Q1
    Q1 --> Q2
    Q2 --> M1
    M1 --> M2
#+end_src

** Kafka Implementation
#+begin_src mermaid :file docs/images/kafka-impl.png
flowchart LR
    subgraph LLMs["LLM Services"]
        L1["Service 1"]
        L2["Service 2"]
        L3["Service 3"]
    end

    subgraph Kafka["Kafka Cluster"]
        K1["Topic: token-usage"]
        K2["Topic: aggregated-usage"]
    end

    subgraph Process["Processing"]
        P1["Kafka Streams\nAggregation"]
    end

    subgraph Monitor["Monitoring"]
        M1["Metrics API"]
        M2["Dashboard"]
    end

    L1 & L2 & L3 --> K1
    K1 --> P1
    P1 --> K2
    K2 --> M1
    M1 --> M2
#+end_src

** Prometheus/Grafana Implementation
#+begin_src mermaid :file docs/images/prom-impl.png
flowchart LR
    subgraph LLMs["LLM Services"]
        L1["Service 1\n/metrics"]
        L2["Service 2\n/metrics"]
        L3["Service 3\n/metrics"]
    end

    subgraph Collect["Collection"]
        C1["Prometheus\nServer"]
    end

    subgraph Visual["Visualization"]
        V1["Grafana\nDashboard"]
    end

    L1 & L2 & L3 --> C1
    C1 --> V1
#+end_src

* Installation
:PROPERTIES:
:header-args:bash: :tangle install.sh
:END:

#+begin_src bash
#!/bin/bash

# Check dependencies
command -v tmux >/dev/null 2>&1 || { echo "Installing tmux..."; brew install tmux; }
command -v xload >/dev/null 2>&1 || { echo "Please ensure XQuartz is installed"; exit 1; }

# Create project structure
mkdir -p docs/images

# Initialize git if not already initialized
if [ ! -d .git ]; then
    git init
    echo "*.log" > .gitignore
    echo ".DS_Store" >> .gitignore
    echo "/tmp" >> .gitignore
    git add .
    git commit -m "Initial commit: TokenViz setup"
fi

echo "TokenViz installation complete!"
echo "Run 'make dashboard' to start visualization"
#+end_src

* Local Testing
:PROPERTIES:
:header-args:bash: :tangle test.sh
:END:

#+begin_src bash
#!/bin/bash

# Run tests
make test

# Optional: Run a quick simulation
make dashboard &
sleep 10
make status
make logs
make stop
#+end_src

* Notes
** Production Considerations
- AWS implementation uses SNS/SQS for reliable event distribution
- Kafka provides high-throughput streaming for real-time aggregation
- Prometheus/Grafana offers traditional metrics collection and visualization

** Development Notes
- Uses simple Unix tools (tmux, xload) for visualization
- Generators simulate variable token usage patterns
- Aggregator provides real-time summation
- All data is ephemeral (/tmp storage)

* Export Configuration
:PROPERTIES:
:header-args: :tangle no
:END:

#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((shell . t)
   (makefile . t)
   (mermaid . t)))
#+end_src

# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
